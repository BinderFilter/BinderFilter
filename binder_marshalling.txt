### binder marshalling

Android sdk: check battery level example
	IntentFilter ifilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
	Intent batteryStatus = view.getContext().registerReceiver(null, ifilter);
	int level = batteryStatus.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);

AOSP/frameworks/base/core/java/android/app/ActivityManagerNative.java
	registerReceiver() is one of the methods that transacts data
		Parcel data = Parcel.obtain();		// get a new parcel
        ...
        filter.writeToParcel(data, 0);		// write the IntentFilter details
        data.writeString(packageName);		// write the package name of sender
        ...
        mRemote.transact(REGISTER_RECEIVER_TRANSACTION, data, reply, 0);	// send

data:
-------------------------------------------------------------
android.os.Binder->BinderProxy.transact() -> native transactNative()

AOSP/frameworks/base/core/jni/android_util_Binder.cpp
	android_os_BinderProxy_transact()
		IBinder* target->transact()

AOSP/frameworks/native/include/binder/BpBinder.h 
	BpBinder implements IBinder
		AOSP/frameworks/native/libs/binder/BpBinder.cpp
			BpBinder::transact() calls IPCThreadState::self()->transact()

AOSP/frameworks/native/libs/binder/IPCThreadState.cpp
	IPCThreadState::self()->transact() calls writeTransactionData()
		binder_transaction_data tr;
		Parcel mOut;
		...
		tr.code = code
		tr.data = data
		...
		mOut.writeInt32(cmd);
   		mOut.write(&tr, sizeof(tr));

Data is written to parcel as: [int32_t cmd, binder_transaction_data tr]
	where cmd is BC_TRANSACTION or BC_REPLY, defined in binder.h as 
		BC_TRANSACTION = _IOW('c', 0, struct binder_transaction_data),
		BC_REPLY = _IOW('c', 1, struct binder_transaction_data),
	binder_transaction_data struct is also defined in binder.h

	tr contains multiple fields
		code defined in frameworks/base/core/java/android/app/IActivityManager.java#626
		and used in frameworks/base/code/java/android/app/ActivityManagerNative.java
			i.e. REGISTER_RECEIVER_TRANSACTION
				 START_ACTIVITY_TRANSACTION
				 GET_UID_FOR_INTENT_SENDER_TRANSACTION
		data is a pointer to a Parcel that is also written in ActivityManagerNative.java
			contains packageName, userId, intent name, intent filter

packageName:
-------------------------------------------------------------
AOSP/frameworks/base/core/java/android/os/Parcel.java
	writeString() -> nativeWriteString()

AOSP/frameworks/base/core/jni/android_os_Parcel.cpp
	android_os_Parcel_writeString() 
		const jchar* str = env->GetStringCritical(val, 0);
        err = parcel->writeString16(reinterpret_cast<const char16_t*>(str), env->GetStringLength(val));

AOSP/frameworks/native/libs/binder/Parcel.cpp
	status_t Parcel::writeString16(const char16_t* str, size_t len)
	{
	    if (str == NULL) return writeInt32(-1);

	    status_t err = writeInt32(len);
	    if (err == NO_ERROR) {
	        len *= sizeof(char16_t);
	        uint8_t* data = (uint8_t*)writeInplace(len+sizeof(char16_t));
	        if (data) {
	            memcpy(data, str, len);
	            *reinterpret_cast<char16_t*>(data+len) = 0;
	            return NO_ERROR;
	        }
	        err = mError;
	    }
	    return err;
	}


### binder unmarshalling

Android sdk: check battery level example
	IntentFilter ifilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
	Intent batteryStatus = view.getContext().registerReceiver(null, ifilter);
	int level = batteryStatus.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);

AOSP/frameworks/base/core/java/android/app/ActivityManagerNative.java
	registerReceiver() is one of the methods that transacts data
		Parcel reply = Parcel.obtain();		// get a new parcel
        ...
        mRemote.transact(REGISTER_RECEIVER_TRANSACTION, data, reply, 0);	// send
        ...
        Intent intent = Intent.CREATOR.createFromParcel(reply);		// reply is populated in transact()
		return intent;

AOSP/frameworks/base/core/java/android/content/Intent.java
	CREATOR.createFromParcel(Parcel in) {
        return new Intent(in);
    }
    protected Intent(Parcel in) {
        readFromParcel(in);
    }
    readFromParcel(Parcel in) {			// unmarshall the parcel
    	...
    	mData = Uri.CREATOR.createFromParcel(in);
        mType = in.readString();
        mFlags = in.readInt();
        mPackage = in.readString();
        ...
    }

    // when Parcel contains a Bundle
    public int getIntExtra(String name, int defaultValue) {
        return mExtras == null ? defaultValue :
            mExtras.getInt(name, defaultValue);
    }

// used when the Parcel contains a Bundle
AOSP/frameworks/base/code/java/android/os/BaseBundle.java
	public int getInt(String key, int defaultValue) {
        unparcel();
        Object o = mMap.get(key);
        ...
        return (Integer) o;
    }

    synchronized void unparcel() {
   		...
        int N = mParcelledData.readInt();
        ...
        mMap = new ArrayMap<String, Object>(N);
        ...
        mParcelledData.readArrayMapInternal(mMap, N, mClassLoader);
        ...
    }

     void readArrayMapInternal(ArrayMap outVal, int N, ClassLoader loader) {
        ...
        int startPos;
        while (N > 0) {
            ...
            String key = readString();
            Object value = readValue(loader);
            ...
            outVal.append(key, value);
            N--;
        }
    }


*** see binder_marshalling.java