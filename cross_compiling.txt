Cross compiling the linux kernel / kernel modules for android
https://source.android.com/source/building-kernels.html

Need two git repos: kernel source for your device (1), cross-compiling gcc (2)
1) determine which version you need from above link, git clone https://android.googlesource.com/kernel/msm.git
2) git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-eabi-4.6

OSX has problems with header files, specifically elf.h and its dependencies, 
I compiled on ubuntu linux in virtualbox

### Determine which git branch you need for your kernel (link above)

$ git clone https://android.googlesource.com/kernel/flo-kernel
$ git log --max-count=1 flo-kernel/kernel | grep "Linux version" | cut -d' ' -f7
$ > 3.4.0-g8ba2631 (branch is what's after the -g)
$ cd msm/ (i.e. the git directory for your kernel source)
$ git checkout 8ba2631


### Compile a linux kernel module
### do this in linux (with shared folder sources if downloaded on osx)
### requires a kernel on your phone with CONFIG_MODULES set when built
### if the kernel doesn't have modules supported (all kernels after 4.3 don't have it supported), then you need to recompile the kernel and flash it onto your phone

$ export ARCH=arm
$ export SUBARCH=arm
$ export CROSS_COMPILE=arm-eabi-
$ export PATH=arm-eabi-4.6/libexec:armeabi-4.6/bin:$PATH

$ arm-eabi-gcc --version 
$ > should give 4.6.x-google etc
$ cc1 --version 
$ > should give no errors

$ cd msm/
$ make flo_defconfig   (replace flo with your kernel name)
$ make prepare

$ vi .config 

### edit .config to include
	CONFIG_MODULES=y
	CONFIG_MODULE_FORCE_LOAD=y
	CONFIG_MODULE_UNLOAD=y
	CONFIG_MODULE_FORCE_UNLOAD=y

$ make modules_prepare
$ make ARCH=arm CONFIG_HELLOWORLD=m M=drivers/helloworld 

$ adb push helloworld_mod.ko /data/local/tmp
$ adb shell 
$ cd /data/local/tmp
$ su
$ insmod helloworld_mod.ko
$ dmesg | grep HELLO


----------------------------------------------------------------------------


### Compile linux kernel for android
$ export ARCH=arm
$ export SUBARCH=arm
$ export CROSS_COMPILE=arm-eabi-
$ export PATH=arm-eabi-4.6/libexec:armeabi-4.6/bin:$PATH

$ arm-eabi-gcc --version 
$ > should give 4.6.x-google etc
$ cc1 --version 
$ > should give no errors

$ cd msm/
$ make flo_defconfig   (replace flo with your kernel name)
$ make prepare

$ vi .config 

### edit .config to include
	CONFIG_MODULES=y
	CONFIG_MODULE_FORCE_LOAD=y
	CONFIG_MODULE_UNLOAD=y
	CONFIG_MODULE_FORCE_UNLOAD=y

$ make

### building kernel results in zImage at /media/sf_msm/arch/arm/boot/zImage
### get existing boot image from phone:
	adb shell
	su
	cd /sdcard/Download
	dd if=/dev/block/platform/*/by-name/boot of=cur-boot.img
	chmod 644 cur-boot.img
	exit
	exit
	adb pull /sdcard/Download/cur-boot.img .

### add recently built kernel to that image
	cp /media/sf_msm/arch/arm/boot/zImage .
	(sudo apt-get abootimg)
	abootimg -u cur-boot.img -k zImage

### flash to phone
	adb reboot bootloader
	fastboot boot cur-boot.img

