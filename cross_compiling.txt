# dwu@winterfell:/Volumes/untitled/flo-kernel $ git log --max-count=1 kernel | grep "Linux version" | cut -d' ' -f7
# > 3.4.0-g8ba2631
# cd /Volumes/untitled/msm
# git checkout 8ba2631
#



# Now in linux

export ARCH=arm
export SUBARCH=arm
export CROSS_COMPILE=arm-eabi-
export PATH=/media/sf_sharedVm/arm-eabi-4.6/libexec:/media/sf_sharedVm/armeabi-4.6/bin:$PATH

arm-eabi-gcc --version # should give 4.6.x-google etc
cc1 --version #should give no errors

cd /media/sf_msm/
make flo_defconfig
make prepare

vi .config # edit .config to include
CONFIG_MODULES=y
CONFIG_MODULE_FORCE_LOAD=y
CONFIG_MODULE_UNLOAD=y
CONFIG_MODULE_FORCE_UNLOAD=y


# for modules:
make modules_prepare

root@dwu-VirtualBox:/media/sf_msm# make ARCH=arm CONFIG_AHH_HELLOWORLD=m -fno-pic M=drivers/ahh_helloworld 

# in mac
cp /media/sf_msm/drivers/ahh_helloworld/ahh_helloworld_mod.ko .
adb push ahh_helloworld_mod.ko /data/local/tmp
adb shell 
cd /data/local/tmp
insmod ahh_helloworld_mod.ko
dmesg | grep HELLO

# make sure the android kernel has CONFIG_MODULES=y when built (i.e. rebuild kernel for that)


# for kernel:
make 


# building kernel results in zimage at /media/sf_msm/arch/arm/boot/zImage
# in linux, apt-get abootimg
# get existing boot image from phone:
	adb shell
	su
	cd /sdcard/Download
	dd if=/dev/block/platform/*/by-name/boot of=cur-boot.img
	chmod 644 cur-boot.img
	exit
	exit
	adb pull /sdcard/Download/cur-boot.img .

# add recently built kernel to that image
	cp /media/sf_msm/arch/arm/boot/zImage .
	abootimg -u cur-boot.img -k zImage

# flash to phone
	adb reboot bootloader
	fastboot boot cur-boot.img




